// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	easee "github.com/futurehomeno/edge-easee-adapter/internal/easee"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ChargerState provides a mock function with given fields: chargerID
func (_m *Client) ChargerState(chargerID string) (*easee.ChargerState, error) {
	ret := _m.Called(chargerID)

	var r0 *easee.ChargerState
	if rf, ok := ret.Get(0).(func(string) *easee.ChargerState); ok {
		r0 = rf(chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*easee.ChargerState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chargers provides a mock function with given fields:
func (_m *Client) Chargers() ([]easee.Charger, error) {
	ret := _m.Called()

	var r0 []easee.Charger
	if rf, ok := ret.Get(0).(func() []easee.Charger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]easee.Charger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: userName, password
func (_m *Client) Login(userName string, password string) (*easee.Credentials, error) {
	ret := _m.Called(userName, password)

	var r0 *easee.Credentials
	if rf, ok := ret.Get(0).(func(string, string) *easee.Credentials); ok {
		r0 = rf(userName, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*easee.Credentials)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Client) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCableLock provides a mock function with given fields: chargerID, locked
func (_m *Client) SetCableLock(chargerID string, locked bool) error {
	ret := _m.Called(chargerID, locked)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(chargerID, locked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetChargingCurrent provides a mock function with given fields: chargerID, current
func (_m *Client) SetChargingCurrent(chargerID string, current float64) error {
	ret := _m.Called(chargerID, current)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(chargerID, current)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartCharging provides a mock function with given fields: chargerID
func (_m *Client) StartCharging(chargerID string) error {
	ret := _m.Called(chargerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(chargerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopCharging provides a mock function with given fields: chargerID
func (_m *Client) StopCharging(chargerID string) error {
	ret := _m.Called(chargerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(chargerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
