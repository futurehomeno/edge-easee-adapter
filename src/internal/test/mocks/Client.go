// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	signalr "github.com/futurehomeno/edge-easee-adapter/internal/signalr"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// Connected provides a mock function with given fields:
func (_m *Client) Connected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListenForObservations provides a mock function with given fields:
func (_m *Client) ListenForObservations() <-chan signalr.Observation {
	ret := _m.Called()

	var r0 <-chan signalr.Observation
	if rf, ok := ret.Get(0).(func() <-chan signalr.Observation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan signalr.Observation)
		}
	}

	return r0
}

// ObserveState provides a mock function with given fields:
func (_m *Client) ObserveState() <-chan signalr.State {
	ret := _m.Called()

	var r0 <-chan signalr.State
	if rf, ok := ret.Get(0).(func() <-chan signalr.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan signalr.State)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Client) Start() {
	_m.Called()
}

// SubscribeCharger provides a mock function with given fields: id
func (_m *Client) SubscribeCharger(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsubscribeCharger provides a mock function with given fields: id
func (_m *Client) UnsubscribeCharger(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
