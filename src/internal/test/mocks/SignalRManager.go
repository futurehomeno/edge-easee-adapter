// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"github.com/stretchr/testify/mock"

	"github.com/futurehomeno/edge-easee-adapter/internal/easee"
)

// SignalRManager is an autogenerated mock type for the SignalRManager type
type SignalRManager struct {
	mock.Mock
}

// Register provides a mock function with given fields: chargerID
func (_m *SignalRManager) Register(chargerID string) easee.ObservationCache {
	ret := _m.Called(chargerID)

	var r0 easee.ObservationCache
	if rf, ok := ret.Get(0).(func(string) easee.ObservationCache); ok {
		r0 = rf(chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(easee.ObservationCache)
		}
	}

	return r0
}

// RegisterCallback provides a mock function with given fields: chargerID, oID, callback
func (_m *SignalRManager) RegisterCallback(chargerID string, oID easee.ObservationID, callback func() error) {
	_m.Called(chargerID, oID, callback)
}

// Start provides a mock function with given fields:
func (_m *SignalRManager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *SignalRManager) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unregister provides a mock function with given fields: chargerID
func (_m *SignalRManager) Unregister(chargerID string) {
	_m.Called(chargerID)
}

type mockConstructorTestingTNewSignalRManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewSignalRManager creates a new instance of SignalRManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSignalRManager(t mockConstructorTestingTNewSignalRManager) *SignalRManager {
	mock := &SignalRManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
