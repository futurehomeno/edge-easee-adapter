// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	easee "github.com/futurehomeno/edge-easee-adapter/internal/easee"
	mock "github.com/stretchr/testify/mock"
)

// ObservationCache is an autogenerated mock type for the ObservationCache type
type ObservationCache struct {
	mock.Mock
}

// CableCurrent provides a mock function with given fields:
func (_m *ObservationCache) CableCurrent() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CableLocked provides a mock function with given fields:
func (_m *ObservationCache) CableLocked() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChargerState provides a mock function with given fields:
func (_m *ObservationCache) ChargerState() easee.ChargerState {
	ret := _m.Called()

	var r0 easee.ChargerState
	if rf, ok := ret.Get(0).(func() easee.ChargerState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(easee.ChargerState)
	}

	return r0
}

// LifetimeEnergy provides a mock function with given fields:
func (_m *ObservationCache) LifetimeEnergy() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MaxCurrent provides a mock function with given fields:
func (_m *ObservationCache) MaxCurrent() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SessionEnergy provides a mock function with given fields:
func (_m *ObservationCache) SessionEnergy() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// TotalPower provides a mock function with given fields:
func (_m *ObservationCache) TotalPower() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// setCableCurrent provides a mock function with given fields: current
func (_m *ObservationCache) setCableCurrent(current int64) {
	_m.Called(current)
}

// setCableLocked provides a mock function with given fields: locked
func (_m *ObservationCache) setCableLocked(locked bool) {
	_m.Called(locked)
}

// setChargerState provides a mock function with given fields: state
func (_m *ObservationCache) setChargerState(state easee.ChargerState) {
	_m.Called(state)
}

// setLifetimeEnergy provides a mock function with given fields: energy
func (_m *ObservationCache) setLifetimeEnergy(energy float64) {
	_m.Called(energy)
}

// setMaxCurrent provides a mock function with given fields: current
func (_m *ObservationCache) setMaxCurrent(current int64) {
	_m.Called(current)
}

// setSessionEnergy provides a mock function with given fields: energy
func (_m *ObservationCache) setSessionEnergy(energy float64) {
	_m.Called(energy)
}

// setTotalPower provides a mock function with given fields: power
func (_m *ObservationCache) setTotalPower(power float64) {
	_m.Called(power)
}

// NewObservationCache creates a new instance of ObservationCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObservationCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObservationCache {
	mock := &ObservationCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
