// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/futurehomeno/edge-easee-adapter/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// HTTPClient is an autogenerated mock type for the HTTPClient type
type HTTPClient struct {
	mock.Mock
}

// ChargerConfig provides a mock function with given fields: accessToken, chargerID
func (_m *HTTPClient) ChargerConfig(accessToken string, chargerID string) (*model.ChargerConfig, error) {
	ret := _m.Called(accessToken, chargerID)

	var r0 *model.ChargerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ChargerConfig, error)); ok {
		return rf(accessToken, chargerID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ChargerConfig); ok {
		r0 = rf(accessToken, chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChargerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargerDetails provides a mock function with given fields: accessToken, chargerID
func (_m *HTTPClient) ChargerDetails(accessToken string, chargerID string) (model.ChargerDetails, error) {
	ret := _m.Called(accessToken, chargerID)

	var r0 model.ChargerDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.ChargerDetails, error)); ok {
		return rf(accessToken, chargerID)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.ChargerDetails); ok {
		r0 = rf(accessToken, chargerID)
	} else {
		r0 = ret.Get(0).(model.ChargerDetails)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargerSessions provides a mock function with given fields: accessToken, chargerID
func (_m *HTTPClient) ChargerSessions(accessToken string, chargerID string) (model.ChargeSessions, error) {
	ret := _m.Called(accessToken, chargerID)

	var r0 model.ChargeSessions
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.ChargeSessions, error)); ok {
		return rf(accessToken, chargerID)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.ChargeSessions); ok {
		r0 = rf(accessToken, chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ChargeSessions)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargerSiteInfo provides a mock function with given fields: accessToken, chargerID
func (_m *HTTPClient) ChargerSiteInfo(accessToken string, chargerID string) (*model.ChargerSiteInfo, error) {
	ret := _m.Called(accessToken, chargerID)

	var r0 *model.ChargerSiteInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ChargerSiteInfo, error)); ok {
		return rf(accessToken, chargerID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ChargerSiteInfo); ok {
		r0 = rf(accessToken, chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChargerSiteInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chargers provides a mock function with given fields: accessToken
func (_m *HTTPClient) Chargers(accessToken string) ([]model.Charger, error) {
	ret := _m.Called(accessToken)

	var r0 []model.Charger
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Charger, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Charger); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Charger)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: userName, password
func (_m *HTTPClient) Login(userName string, password string) (*model.Credentials, error) {
	ret := _m.Called(userName, password)

	var r0 *model.Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Credentials, error)); ok {
		return rf(userName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Credentials); ok {
		r0 = rf(userName, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Credentials)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: accessToken
func (_m *HTTPClient) Ping(accessToken string) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: accessToken, refreshToken
func (_m *HTTPClient) RefreshToken(accessToken string, refreshToken string) (*model.Credentials, error) {
	ret := _m.Called(accessToken, refreshToken)

	var r0 *model.Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Credentials, error)); ok {
		return rf(accessToken, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Credentials); ok {
		r0 = rf(accessToken, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Credentials)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCableAlwaysLocked provides a mock function with given fields: accessToken, chargerID, locked
func (_m *HTTPClient) SetCableAlwaysLocked(accessToken string, chargerID string, locked bool) error {
	ret := _m.Called(accessToken, chargerID, locked)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(accessToken, chargerID, locked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopCharging provides a mock function with given fields: accessToken, chargerID
func (_m *HTTPClient) StopCharging(accessToken string, chargerID string) error {
	ret := _m.Called(accessToken, chargerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accessToken, chargerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDynamicCurrent provides a mock function with given fields: accessToken, chargerID, current
func (_m *HTTPClient) UpdateDynamicCurrent(accessToken string, chargerID string, current float64) error {
	ret := _m.Called(accessToken, chargerID, current)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(accessToken, chargerID, current)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMaxCurrent provides a mock function with given fields: accessToken, chargerID, current
func (_m *HTTPClient) UpdateMaxCurrent(accessToken string, chargerID string, current float64) error {
	ret := _m.Called(accessToken, chargerID, current)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(accessToken, chargerID, current)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHTTPClient creates a new instance of HTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPClient {
	mock := &HTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
