// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	chargepoint "github.com/futurehomeno/cliffhanger/adapter/service/chargepoint"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// CableCurrent provides a mock function with given fields:
func (_m *Cache) CableCurrent() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CableLocked provides a mock function with given fields:
func (_m *Cache) CableLocked() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChargerState provides a mock function with given fields:
func (_m *Cache) ChargerState() chargepoint.State {
	ret := _m.Called()

	var r0 chargepoint.State
	if rf, ok := ret.Get(0).(func() chargepoint.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chargepoint.State)
	}

	return r0
}

// LifetimeEnergy provides a mock function with given fields:
func (_m *Cache) LifetimeEnergy() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MaxCurrent provides a mock function with given fields:
func (_m *Cache) MaxCurrent() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SetCableCurrent provides a mock function with given fields: current
func (_m *Cache) SetCableCurrent(current int64) {
	_m.Called(current)
}

// SetCableLocked provides a mock function with given fields: locked
func (_m *Cache) SetCableLocked(locked bool) {
	_m.Called(locked)
}

// SetChargerState provides a mock function with given fields: state
func (_m *Cache) SetChargerState(state chargepoint.State) {
	_m.Called(state)
}

// SetLifetimeEnergy provides a mock function with given fields: energy
func (_m *Cache) SetLifetimeEnergy(energy float64) {
	_m.Called(energy)
}

// SetMaxCurrent provides a mock function with given fields: current
func (_m *Cache) SetMaxCurrent(current int64) {
	_m.Called(current)
}

// SetTotalPower provides a mock function with given fields: power
func (_m *Cache) SetTotalPower(power float64) {
	_m.Called(power)
}

// TotalPower provides a mock function with given fields:
func (_m *Cache) TotalPower() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
