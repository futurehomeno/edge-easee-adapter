// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	cliffhangerapp "github.com/futurehomeno/cliffhanger/app"
	manifest "github.com/futurehomeno/cliffhanger/manifest"

	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// Check provides a mock function with given fields:
func (_m *Application) Check() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configure provides a mock function with given fields: config
func (_m *Application) Configure(config interface{}) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManifest provides a mock function with given fields:
func (_m *Application) GetManifest() (*manifest.Manifest, error) {
	ret := _m.Called()

	var r0 *manifest.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func() (*manifest.Manifest, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *manifest.Manifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manifest.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields:
func (_m *Application) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: credentials
func (_m *Application) Login(credentials *cliffhangerapp.LoginCredentials) error {
	ret := _m.Called(credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cliffhangerapp.LoginCredentials) error); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields:
func (_m *Application) Logout() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Uninstall provides a mock function with given fields:
func (_m *Application) Uninstall() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
