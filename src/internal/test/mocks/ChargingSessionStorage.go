// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	db "github.com/futurehomeno/edge-easee-adapter/internal/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/futurehomeno/edge-easee-adapter/internal/model"
)

// ChargingSessionStorage is an autogenerated mock type for the ChargingSessionStorage type
type ChargingSessionStorage struct {
	mock.Mock
}

// LatestSessionsByChargerID provides a mock function with given fields: chargerID
func (_m *ChargingSessionStorage) LatestSessionsByChargerID(chargerID string) (db.ChargingSessions, error) {
	ret := _m.Called(chargerID)

	if len(ret) == 0 {
		panic("no return value specified for LatestSessionsByChargerID")
	}

	var r0 db.ChargingSessions
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.ChargingSessions, error)); ok {
		return rf(chargerID)
	}
	if rf, ok := ret.Get(0).(func(string) db.ChargingSessions); ok {
		r0 = rf(chargerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.ChargingSessions)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chargerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSessionStart provides a mock function with given fields: chargerID, session
func (_m *ChargingSessionStorage) RegisterSessionStart(chargerID string, session model.StartChargingSession) error {
	ret := _m.Called(chargerID, session)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSessionStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.StartChargingSession) error); ok {
		r0 = rf(chargerID, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSessionStop provides a mock function with given fields: chargerID, session
func (_m *ChargingSessionStorage) RegisterSessionStop(chargerID string, session model.StopChargingSession) error {
	ret := _m.Called(chargerID, session)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSessionStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.StopChargingSession) error); ok {
		r0 = rf(chargerID, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reset provides a mock function with no fields
func (_m *ChargingSessionStorage) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *ChargingSessionStorage) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *ChargingSessionStorage) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChargingSessionStorage creates a new instance of ChargingSessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChargingSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChargingSessionStorage {
	mock := &ChargingSessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
