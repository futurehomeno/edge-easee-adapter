// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	chargepoint "github.com/futurehomeno/cliffhanger/adapter/service/chargepoint"
	easee "github.com/futurehomeno/edge-easee-adapter/internal/easee"

	mock "github.com/stretchr/testify/mock"

	numericmeter "github.com/futurehomeno/cliffhanger/adapter/service/numericmeter"

	parameters "github.com/futurehomeno/cliffhanger/adapter/service/parameters"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// ChargepointCableLockReport provides a mock function with given fields:
func (_m *Controller) ChargepointCableLockReport() (*chargepoint.CableReport, error) {
	ret := _m.Called()

	var r0 *chargepoint.CableReport
	var r1 error
	if rf, ok := ret.Get(0).(func() (*chargepoint.CableReport, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *chargepoint.CableReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chargepoint.CableReport)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointCurrentSessionReport provides a mock function with given fields:
func (_m *Controller) ChargepointCurrentSessionReport() (*chargepoint.SessionReport, error) {
	ret := _m.Called()

	var r0 *chargepoint.SessionReport
	var r1 error
	if rf, ok := ret.Get(0).(func() (*chargepoint.SessionReport, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *chargepoint.SessionReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chargepoint.SessionReport)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointMaxCurrentReport provides a mock function with given fields:
func (_m *Controller) ChargepointMaxCurrentReport() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointPhaseModeReport provides a mock function with given fields:
func (_m *Controller) ChargepointPhaseModeReport() (chargepoint.PhaseMode, error) {
	ret := _m.Called()

	var r0 chargepoint.PhaseMode
	var r1 error
	if rf, ok := ret.Get(0).(func() (chargepoint.PhaseMode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chargepoint.PhaseMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chargepoint.PhaseMode)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChargepointStateReport provides a mock function with given fields:
func (_m *Controller) ChargepointStateReport() (chargepoint.State, error) {
	ret := _m.Called()

	var r0 chargepoint.State
	var r1 error
	if rf, ok := ret.Get(0).(func() (chargepoint.State, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chargepoint.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chargepoint.State)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParameter provides a mock function with given fields: id
func (_m *Controller) GetParameter(id string) (*parameters.Parameter, error) {
	ret := _m.Called(id)

	var r0 *parameters.Parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*parameters.Parameter, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *parameters.Parameter); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*parameters.Parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParameterSpecifications provides a mock function with given fields:
func (_m *Controller) GetParameterSpecifications() ([]*parameters.ParameterSpecification, error) {
	ret := _m.Called()

	var r0 []*parameters.ParameterSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*parameters.ParameterSpecification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*parameters.ParameterSpecification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*parameters.ParameterSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeterExtendedReport provides a mock function with given fields: values
func (_m *Controller) MeterExtendedReport(values numericmeter.Values) (numericmeter.ValuesReport, error) {
	ret := _m.Called(values)

	var r0 numericmeter.ValuesReport
	var r1 error
	if rf, ok := ret.Get(0).(func(numericmeter.Values) (numericmeter.ValuesReport, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func(numericmeter.Values) numericmeter.ValuesReport); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(numericmeter.ValuesReport)
		}
	}

	if rf, ok := ret.Get(1).(func(numericmeter.Values) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeterReport provides a mock function with given fields: unit
func (_m *Controller) MeterReport(unit numericmeter.Unit) (float64, error) {
	ret := _m.Called(unit)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(numericmeter.Unit) (float64, error)); ok {
		return rf(unit)
	}
	if rf, ok := ret.Get(0).(func(numericmeter.Unit) float64); ok {
		r0 = rf(unit)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(numericmeter.Unit) error); ok {
		r1 = rf(unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChargepointMaxCurrent provides a mock function with given fields: _a0
func (_m *Controller) SetChargepointMaxCurrent(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetChargepointOfferedCurrent provides a mock function with given fields: _a0
func (_m *Controller) SetChargepointOfferedCurrent(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetParameter provides a mock function with given fields: p
func (_m *Controller) SetParameter(p *parameters.Parameter) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*parameters.Parameter) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartChargepointCharging provides a mock function with given fields: settings
func (_m *Controller) StartChargepointCharging(settings *chargepoint.ChargingSettings) error {
	ret := _m.Called(settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chargepoint.ChargingSettings) error); ok {
		r0 = rf(settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopChargepointCharging provides a mock function with given fields:
func (_m *Controller) StopChargepointCharging() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: chargerID, state
func (_m *Controller) UpdateState(chargerID string, state *easee.State) error {
	ret := _m.Called(chargerID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *easee.State) error); ok {
		r0 = rf(chargerID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
